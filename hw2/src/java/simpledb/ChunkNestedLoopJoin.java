package simpledb;

import java.util.*;

/**
 * The ChunkNestedLoopJoin operator implements the chunk nested loop join operation.
 */
public class ChunkNestedLoopJoin extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate pred;
    private DbIterator child1, child2;
    private TupleDesc comboTD;
    private int chunkSize;

    private Chunk chunk;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     * @param chunkSize
     *            The chunk size used for chunk nested loop join
     */
    public ChunkNestedLoopJoin(JoinPredicate p, DbIterator child1, DbIterator child2, int chunkSize) {
        this.pred = p;
        this.child1 = child1;
        this.child2 = child2;
        this.chunkSize = chunkSize;
        comboTD = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());

        this.chunk = new Chunk(chunkSize);
    }

    public JoinPredicate getJoinPredicate() {
        return pred;
    }

    public TupleDesc getTupleDesc() {
        return comboTD;
    }

    /**
     * Opens the iterator.
     */
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // IMPLEMENT ME
        child1.open();
        child2.open();
        super.open();
    }

    /**
     * Closes the iterator.
     */
    public void close() {
        // IMPLEMENT ME
        super.close();
        child2.close();
        child1.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the current chunk. 
     */
    public Chunk getCurrentChunk() throws DbException, TransactionAbortedException {
        // IMPLEMENT ME
        return this.chunk;
    }
 
    /**
     * Updates the current chunk with the next set of Tuples and returns the chunk.
     */
    protected Chunk fetchNextChunk() throws DbException, TransactionAbortedException {
        // IMPLEMENT ME
        chunk.loadChunk(this.child1);
        return this.chunk;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. 
     * 
     * Note that the tuples returned from this particular implementation
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results.
     * 
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // IMPLEMENT ME

        int num = this.chunk.getTupleNums();
        
        do{
            Tuple[] ts = chunk.getChunkTuples();
            for(int j=0;j<num;j++){
                Tuple t1 = ts[j];

                while (child2.hasNext()) {
                    Tuple t2 = child2.next();

                    // if match, create a combined tuple and fill it with the values
                    // from both tuples
                    if (!pred.filter(t1, t2))
                        continue;

                    int td1n = t1.getTupleDesc().numFields();
                    int td2n = t2.getTupleDesc().numFields();

                    // set fields in combined tuple
                    Tuple t = new Tuple(comboTD);
                    for (int i = 0; i < td1n; i++)
                        t.setField(i, t1.getField(i));
                    for (int i = 0; i < td2n; i++)
                        t.setField(td1n + i, t2.getField(i));
                    return t;
                }
                child2.rewind();
            }
            fetchNextChunk();
            num = chunk.getTupleNums();
        }while(num > 0);
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[] { this.child1, this.child2 };
    }

    @Override
    public void setChildren(DbIterator[] children) {
        this.child1 = children[0];
        this.child2 = children[1];
    }

}
